装饰模式（decorator）
又称包装模式（wrapper）

典型的实例：就是  FileWriter和BufferWriter，BufferWriter对FileWriter进行增强

装饰模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案
装饰模式以对客户透明的方式动态的给一个对象附近上更多的责任。换言之，客户
端并不会觉得对象在装饰前后有什么不同
装饰模式把客户端的调用委派到被装饰类，装饰模式的关键在于这种扩展完全是透明的。
装饰模式是在不必改变原类文件和使用继承的情况下，动态的扩展一个对象的功能。它是
通过创建一个包装对象，也就是装饰来包裹真实的对象

装饰模式的角色
 抽象构建角色：给出一个抽象接口，以规范准备接收附加责任的对象。
 具体构建角色：定义一个将要接收附加责任的类。
 装饰角色：持有一个构建对象的引用，并定义一个与抽象构建接口一致的接口
 具体装饰角色：负责给构建对象贴上附加的责任
 


其实 该模式  跟静态代理模式挺象  只用应用的业务场景不同   都是给某个方法  增加额外的操作
    代理模式  是  给某个方法执行前提供一些验证等信息
而 装饰模式 是  给某个方法增加功能
























